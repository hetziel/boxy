/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/boxy-live.js":
/*!*****************************!*\
  !*** ./src/js/boxy-live.js ***!
  \*****************************/
/***/ (() => {

eval("document.body.style.display = \"none\"\r\n// Update\r\nconst callbackLive = (mutationList, observer) => {\r\n  for (const mutation of mutationList) {\r\n    if (mutation.type === \"childList\") {\r\n      if (_onView) {\r\n        boxyView();\r\n      }\r\n      if (_onCode) {\r\n        boxyCode();\r\n      }\r\n    }\r\n  }\r\n};\r\nconst observerLive = new MutationObserver(callbackLive);\r\nconst targetNodeLive = document.body;\r\nconst configLive = { attributes: true, childList: true, subtree: true };\r\nobserverLive.observe(targetNodeLive, configLive);\r\n\r\n// Inicio\r\nlet viewContainer = [];\r\nlet codeContainer = [];\r\nlet _onView = true;\r\nlet _onCode = true;\r\n\r\n\r\n//Settings\r\nconst svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z\"/></svg>`;\r\n\r\n//First Load\r\nboxyView();\r\nboxyCode();\r\nliveEvents();\r\n\r\n// Boot\r\nwindow.addEventListener(\"load\", (event) => {\r\n  console.log(\"Boxy Live is mounted\");\r\n});\r\n\r\n// Fetch\r\nfunction get_data(url, codigo, callback) {\r\n  const code = codigo;\r\n  fetch(url + \".html\").then((res) => {\r\n    if (res.status == 404) {\r\n      // callback(`<div error> El componente no se ha encontrado ${url}</div>`);\r\n      callback(`<div error>la vista ${url} no se ha encontrado en la ruta establecida <span code class=\"mt1\">${code}</span></div>`)\r\n      // throw new Error('Something went wrong');\r\n    }else if (res.status == 403) {\r\n      callback(`<div error> Error en <span code>${code}</span> no se ha encontrado en la ruta establecida.</div>`)\r\n      // throw new Error('Something went wrong');\r\n    }else {\r\n      res.text().then((response) => {\r\n        callback(response);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction boxyView() {\r\n  let foundBoxy = document.querySelector(\"[b-view]\");\r\n\r\n  if (foundBoxy && _onView) {\r\n    document.body.style.display = \"none\"\r\n    _onView = false;\r\n    fillData(foundBoxy, \"view\").then((data) => {\r\n      foundBoxy.outerHTML = `${data}`;\r\n      _onView = true;\r\n    document.body.style.display = \"revert\"\r\n\r\n    });\r\n  }\r\n}\r\n\r\nfunction fillData(entrada, type) {\r\n  let _container, _attr, _folder;\r\n  \r\n  switch (type) {\r\n    case \"view\":\r\n      _container = viewContainer;\r\n      _attr = \"b-view\";\r\n      _folder = \"/views/\";\r\n      break;\r\n    case \"code\":\r\n      _container = codeContainer;\r\n      _attr = \"b-code\";\r\n      _folder = \"/data/\";\r\n\r\n      break;\r\n  }\r\n  // entrada = entrada.attributes[_attr].value\r\n  let codigo = entrada.outerHTML;\r\n  codigo = codigo.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")\r\n  entrada = entrada.getAttribute(_attr).replace(\".\", \"/\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    if (_container[entrada]) {\r\n      resolve(_container[entrada]);\r\n    } else {\r\n      get_data(\r\n        _folder + entrada.trim(), codigo,\r\n        function (data) {\r\n          _container[entrada] = data;\r\n          resolve(data);\r\n        }\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// Boxy code\r\nfunction boxyCode() {\r\n  let foundCode = document.querySelector(\"[b-code]\");\r\n\r\n  if (foundCode && _onCode && foundCode.getAttribute('b-code') != \"\") {\r\n\r\n    _onCode = false;\r\n    fillData(foundCode, \"code\").then((data) => {\r\n      const iconCopy = document.createElement(\"span\");\r\n      iconCopy.innerHTML = svg;\r\n      iconCopy.classList.add(\"copy-icon\");\r\n\r\n      const textNode = document.createTextNode(data);\r\n      const content = document.createElement(\"pre\");\r\n      content.appendChild(textNode);\r\n\r\n      foundCode.appendChild(content);\r\n      w3CodeColor(foundCode);\r\n      foundCode.appendChild(iconCopy);\r\n      foundCode.removeAttribute(\"b-code\");\r\n      foundCode.setAttribute(\"code\", \"\");\r\n\r\n      _onCode = true;\r\n    });\r\n  }\r\n}\r\n\r\nfunction liveEvents() {\r\n  document.addEventListener(\"click\", function (e) {\r\n    // copy code\r\n    if ((bCopy = e.target.closest(\"[code] .copy-icon\"))) {\r\n      appCopy(bCopy.parentNode.children[0]);\r\n    }\r\n  });\r\n}\r\n\r\nfunction w3CodeColor(elmnt, mode) {\r\n  var lang = mode || \"html\";\r\n  var elmntObj = document.getElementById(elmnt) || elmnt;\r\n  var elmntTxt = elmntObj.innerHTML;\r\n  var tagcolor = \"#0dcaf0\";\r\n  var tagnamecolor = \"#eb6b06\";\r\n  var attributecolor = \"#c58dff\";\r\n  var attributevaluecolor = \"#ffff00\";\r\n  var commentcolor = \"green\";\r\n  var cssselectorcolor = \"brown\";\r\n  var csspropertycolor = \"red\";\r\n  var csspropertyvaluecolor = \"mediumblue\";\r\n  var cssdelimitercolor = \"black\";\r\n  var cssimportantcolor = \"red\";\r\n  var jscolor = \"black\";\r\n  var jskeywordcolor = \"mediumblue\";\r\n  var jsstringcolor = \"brown\";\r\n  var jsnumbercolor = \"red\";\r\n  var jspropertycolor = \"black\";\r\n  elmntObj.style.fontFamily = \"Consolas,'Courier New', monospace\";\r\n  if (!lang) {\r\n    lang = \"html\";\r\n  }\r\n  if (lang == \"html\") {\r\n    elmntTxt = htmlMode(elmntTxt);\r\n  }\r\n  if (lang == \"css\") {\r\n    elmntTxt = cssMode(elmntTxt);\r\n  }\r\n  if (lang == \"js\") {\r\n    elmntTxt = jsMode(elmntTxt);\r\n  }\r\n  elmntObj.innerHTML = elmntTxt;\r\n\r\n  function extract(str, start, end, func, repl) {\r\n    var s,\r\n      e,\r\n      d = \"\",\r\n      a = [];\r\n    while (str.search(start) > -1) {\r\n      s = str.search(start);\r\n      e = str.indexOf(end, s);\r\n      if (e == -1) {\r\n        e = str.length;\r\n      }\r\n      if (repl) {\r\n        a.push(func(str.substring(s, e + end.length)));\r\n        str = str.substring(0, s) + repl + str.substr(e + end.length);\r\n      } else {\r\n        d += str.substring(0, s);\r\n        d += func(str.substring(s, e + end.length));\r\n        str = str.substr(e + end.length);\r\n      }\r\n    }\r\n    this.rest = d + str;\r\n    this.arr = a;\r\n  }\r\n  function htmlMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      php,\r\n      comment,\r\n      angular,\r\n      startpos,\r\n      endpos,\r\n      note,\r\n      i;\r\n    comment = new extract(\r\n      rest,\r\n      \"&lt;!--\",\r\n      \"--&gt;\",\r\n      commentMode,\r\n      \"W3HTMLCOMMENTPOS\"\r\n    );\r\n    rest = comment.rest;\r\n    while (rest.indexOf(\"&lt;\") > -1) {\r\n      note = \"\";\r\n      startpos = rest.indexOf(\"&lt;\");\r\n      if (rest.substr(startpos, 9).toUpperCase() == \"&LT;STYLE\") {\r\n        note = \"css\";\r\n      }\r\n      if (rest.substr(startpos, 10).toUpperCase() == \"&LT;SCRIPT\") {\r\n        note = \"javascript\";\r\n      }\r\n      endpos = rest.indexOf(\"&gt;\", startpos);\r\n      if (endpos == -1) {\r\n        endpos = rest.length;\r\n      }\r\n      done += rest.substring(0, startpos);\r\n      done += tagMode(rest.substring(startpos, endpos + 4));\r\n      rest = rest.substr(endpos + 4);\r\n      if (note == \"css\") {\r\n        endpos = rest.indexOf(\"&lt;/style&gt;\");\r\n        if (endpos > -1) {\r\n          done += cssMode(rest.substring(0, endpos));\r\n          rest = rest.substr(endpos);\r\n        }\r\n      }\r\n      if (note == \"javascript\") {\r\n        endpos = rest.indexOf(\"&lt;/script&gt;\");\r\n        if (endpos > -1) {\r\n          done += jsMode(rest.substring(0, endpos));\r\n          rest = rest.substr(endpos);\r\n        }\r\n      }\r\n    }\r\n    rest = done + rest;\r\n    for (i = 0; i < comment.arr.length; i++) {\r\n      rest = rest.replace(\"W3HTMLCOMMENTPOS\", comment.arr[i]);\r\n    }\r\n    return rest;\r\n  }\r\n  function tagMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      startpos,\r\n      endpos,\r\n      result;\r\n    while (rest.search(/(\\s|<br>)/) > -1) {\r\n      startpos = rest.search(/(\\s|<br>)/);\r\n      endpos = rest.indexOf(\"&gt;\");\r\n      if (endpos == -1) {\r\n        endpos = rest.length;\r\n      }\r\n      done += rest.substring(0, startpos);\r\n      done += attributeMode(rest.substring(startpos, endpos));\r\n      rest = rest.substr(endpos);\r\n    }\r\n    result = done + rest;\r\n    result =\r\n      \"<span style=color:\" + tagcolor + \">&lt;</span>\" + result.substring(4);\r\n    if (result.substr(result.length - 4, 4) == \"&gt;\") {\r\n      result =\r\n        result.substring(0, result.length - 4) +\r\n        \"<span style=color:\" +\r\n        tagcolor +\r\n        \">&gt;</span>\";\r\n    }\r\n    return \"<span style=color:\" + tagnamecolor + \">\" + result + \"</span>\";\r\n  }\r\n  function attributeMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      startpos,\r\n      endpos,\r\n      singlefnuttpos,\r\n      doublefnuttpos,\r\n      spacepos;\r\n    while (rest.indexOf(\"=\") > -1) {\r\n      endpos = -1;\r\n      startpos = rest.indexOf(\"=\");\r\n      singlefnuttpos = rest.indexOf(\"'\", startpos);\r\n      doublefnuttpos = rest.indexOf('\"', startpos);\r\n      spacepos = rest.indexOf(\" \", startpos + 2);\r\n      if (\r\n        spacepos > -1 &&\r\n        (spacepos < singlefnuttpos || singlefnuttpos == -1) &&\r\n        (spacepos < doublefnuttpos || doublefnuttpos == -1)\r\n      ) {\r\n        endpos = rest.indexOf(\" \", startpos);\r\n      } else if (\r\n        doublefnuttpos > -1 &&\r\n        (doublefnuttpos < singlefnuttpos || singlefnuttpos == -1) &&\r\n        (doublefnuttpos < spacepos || spacepos == -1)\r\n      ) {\r\n        endpos = rest.indexOf('\"', rest.indexOf('\"', startpos) + 1);\r\n      } else if (\r\n        singlefnuttpos > -1 &&\r\n        (singlefnuttpos < doublefnuttpos || doublefnuttpos == -1) &&\r\n        (singlefnuttpos < spacepos || spacepos == -1)\r\n      ) {\r\n        endpos = rest.indexOf(\"'\", rest.indexOf(\"'\", startpos) + 1);\r\n      }\r\n      if (!endpos || endpos == -1 || endpos < startpos) {\r\n        endpos = rest.length;\r\n      }\r\n      done += rest.substring(0, startpos);\r\n      done += attributeValueMode(rest.substring(startpos, endpos + 1));\r\n      rest = rest.substr(endpos + 1);\r\n    }\r\n    return (\r\n      \"<span style=color:\" + attributecolor + \">\" + done + rest + \"</span>\"\r\n    );\r\n  }\r\n  function attributeValueMode(txt) {\r\n    return \"<span style=color:\" + attributevaluecolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function commentMode(txt) {\r\n    return \"<span style=color:\" + commentcolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function cssMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      s,\r\n      e,\r\n      comment,\r\n      i,\r\n      midz,\r\n      c,\r\n      cc;\r\n    comment = new extract(rest, /\\/\\*/, \"*/\", commentMode, \"W3CSSCOMMENTPOS\");\r\n    rest = comment.rest;\r\n    while (rest.search(\"{\") > -1) {\r\n      s = rest.search(\"{\");\r\n      midz = rest.substr(s + 1);\r\n      cc = 1;\r\n      c = 0;\r\n      for (i = 0; i < midz.length; i++) {\r\n        if (midz.substr(i, 1) == \"{\") {\r\n          cc++;\r\n          c++;\r\n        }\r\n        if (midz.substr(i, 1) == \"}\") {\r\n          cc--;\r\n        }\r\n        if (cc == 0) {\r\n          break;\r\n        }\r\n      }\r\n      if (cc != 0) {\r\n        c = 0;\r\n      }\r\n      e = s;\r\n      for (i = 0; i <= c; i++) {\r\n        e = rest.indexOf(\"}\", e + 1);\r\n      }\r\n      if (e == -1) {\r\n        e = rest.length;\r\n      }\r\n      done += rest.substring(0, s + 1);\r\n      done += cssPropertyMode(rest.substring(s + 1, e));\r\n      rest = rest.substr(e);\r\n    }\r\n    rest = done + rest;\r\n    rest = rest.replace(\r\n      /{/g,\r\n      \"<span style=color:\" + cssdelimitercolor + \">{</span>\"\r\n    );\r\n    rest = rest.replace(\r\n      /}/g,\r\n      \"<span style=color:\" + cssdelimitercolor + \">}</span>\"\r\n    );\r\n    for (i = 0; i < comment.arr.length; i++) {\r\n      rest = rest.replace(\"W3CSSCOMMENTPOS\", comment.arr[i]);\r\n    }\r\n    return \"<span style=color:\" + cssselectorcolor + \">\" + rest + \"</span>\";\r\n  }\r\n  function cssPropertyMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      s,\r\n      e,\r\n      n,\r\n      loop;\r\n    if (rest.indexOf(\"{\") > -1) {\r\n      return cssMode(rest);\r\n    }\r\n    while (rest.search(\":\") > -1) {\r\n      s = rest.search(\":\");\r\n      loop = true;\r\n      n = s;\r\n      while (loop == true) {\r\n        loop = false;\r\n        e = rest.indexOf(\";\", n);\r\n        if (rest.substring(e - 5, e + 1) == \"&nbsp;\") {\r\n          loop = true;\r\n          n = e + 1;\r\n        }\r\n      }\r\n      if (e == -1) {\r\n        e = rest.length;\r\n      }\r\n      done += rest.substring(0, s);\r\n      done += cssPropertyValueMode(rest.substring(s, e + 1));\r\n      rest = rest.substr(e + 1);\r\n    }\r\n    return (\r\n      \"<span style=color:\" + csspropertycolor + \">\" + done + rest + \"</span>\"\r\n    );\r\n  }\r\n  function cssPropertyValueMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      s;\r\n    rest =\r\n      \"<span style=color:\" +\r\n      cssdelimitercolor +\r\n      \">:</span>\" +\r\n      rest.substring(1);\r\n    while (rest.search(/!important/i) > -1) {\r\n      s = rest.search(/!important/i);\r\n      done += rest.substring(0, s);\r\n      done += cssImportantMode(rest.substring(s, s + 10));\r\n      rest = rest.substr(s + 10);\r\n    }\r\n    result = done + rest;\r\n    if (\r\n      result.substr(result.length - 1, 1) == \";\" &&\r\n      result.substr(result.length - 6, 6) != \"&nbsp;\" &&\r\n      result.substr(result.length - 4, 4) != \"&lt;\" &&\r\n      result.substr(result.length - 4, 4) != \"&gt;\" &&\r\n      result.substr(result.length - 5, 5) != \"&amp;\"\r\n    ) {\r\n      result =\r\n        result.substring(0, result.length - 1) +\r\n        \"<span style=color:\" +\r\n        cssdelimitercolor +\r\n        \">;</span>\";\r\n    }\r\n    return (\r\n      \"<span style=color:\" + csspropertyvaluecolor + \">\" + result + \"</span>\"\r\n    );\r\n  }\r\n  function cssImportantMode(txt) {\r\n    return (\r\n      \"<span style=color:\" +\r\n      cssimportantcolor +\r\n      \";font-weight:bold;>\" +\r\n      txt +\r\n      \"</span>\"\r\n    );\r\n  }\r\n  function jsMode(txt) {\r\n    var rest = txt,\r\n      done = \"\",\r\n      esc = [],\r\n      i,\r\n      cc,\r\n      tt = \"\",\r\n      sfnuttpos,\r\n      dfnuttpos,\r\n      compos,\r\n      comlinepos,\r\n      keywordpos,\r\n      numpos,\r\n      mypos,\r\n      dotpos,\r\n      y;\r\n    for (i = 0; i < rest.length; i++) {\r\n      cc = rest.substr(i, 1);\r\n      if (cc == \"\\\\\") {\r\n        esc.push(rest.substr(i, 2));\r\n        cc = \"W3JSESCAPE\";\r\n        i++;\r\n      }\r\n      tt += cc;\r\n    }\r\n    rest = tt;\r\n    y = 1;\r\n    while (y == 1) {\r\n      sfnuttpos = getPos(rest, \"'\", \"'\", jsStringMode);\r\n      dfnuttpos = getPos(rest, '\"', '\"', jsStringMode);\r\n      compos = getPos(rest, /\\/\\*/, \"*/\", commentMode);\r\n      comlinepos = getPos(rest, /\\/\\//, \"<br>\", commentMode);\r\n      numpos = getNumPos(rest, jsNumberMode);\r\n      keywordpos = getKeywordPos(\"js\", rest, jsKeywordMode);\r\n      dotpos = getDotPos(rest, jsPropertyMode);\r\n      if (\r\n        Math.max(\r\n          numpos[0],\r\n          sfnuttpos[0],\r\n          dfnuttpos[0],\r\n          compos[0],\r\n          comlinepos[0],\r\n          keywordpos[0],\r\n          dotpos[0]\r\n        ) == -1\r\n      ) {\r\n        break;\r\n      }\r\n      mypos = getMinPos(\r\n        numpos,\r\n        sfnuttpos,\r\n        dfnuttpos,\r\n        compos,\r\n        comlinepos,\r\n        keywordpos,\r\n        dotpos\r\n      );\r\n      if (mypos[0] == -1) {\r\n        break;\r\n      }\r\n      if (mypos[0] > -1) {\r\n        done += rest.substring(0, mypos[0]);\r\n        done += mypos[2](rest.substring(mypos[0], mypos[1]));\r\n        rest = rest.substr(mypos[1]);\r\n      }\r\n    }\r\n    rest = done + rest;\r\n    for (i = 0; i < esc.length; i++) {\r\n      rest = rest.replace(\"W3JSESCAPE\", esc[i]);\r\n    }\r\n    return \"<span style=color:\" + jscolor + \">\" + rest + \"</span>\";\r\n  }\r\n  function jsStringMode(txt) {\r\n    return \"<span style=color:\" + jsstringcolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function jsKeywordMode(txt) {\r\n    return \"<span style=color:\" + jskeywordcolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function jsNumberMode(txt) {\r\n    return \"<span style=color:\" + jsnumbercolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function jsPropertyMode(txt) {\r\n    return \"<span style=color:\" + jspropertycolor + \">\" + txt + \"</span>\";\r\n  }\r\n  function getDotPos(txt, func) {\r\n    var x,\r\n      i,\r\n      j,\r\n      s,\r\n      e,\r\n      arr = [\r\n        \".\",\r\n        \"<\",\r\n        \" \",\r\n        \";\",\r\n        \"(\",\r\n        \"+\",\r\n        \")\",\r\n        \"[\",\r\n        \"]\",\r\n        \",\",\r\n        \"&\",\r\n        \":\",\r\n        \"{\",\r\n        \"}\",\r\n        \"/\",\r\n        \"-\",\r\n        \"*\",\r\n        \"|\",\r\n        \"%\",\r\n      ];\r\n    s = txt.indexOf(\".\");\r\n    if (s > -1) {\r\n      x = txt.substr(s + 1);\r\n      for (j = 0; j < x.length; j++) {\r\n        cc = x[j];\r\n        for (i = 0; i < arr.length; i++) {\r\n          if (cc.indexOf(arr[i]) > -1) {\r\n            e = j;\r\n            return [s + 1, e + s + 1, func];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return [-1, -1, func];\r\n  }\r\n  function getMinPos() {\r\n    var i,\r\n      arr = [];\r\n    for (i = 0; i < arguments.length; i++) {\r\n      if (arguments[i][0] > -1) {\r\n        if (arr.length == 0 || arguments[i][0] < arr[0]) {\r\n          arr = arguments[i];\r\n        }\r\n      }\r\n    }\r\n    if (arr.length == 0) {\r\n      arr = arguments[i];\r\n    }\r\n    return arr;\r\n  }\r\n  function getKeywordPos(typ, txt, func) {\r\n    var words,\r\n      i,\r\n      pos,\r\n      rpos = -1,\r\n      rpos2 = -1,\r\n      patt;\r\n    if (typ == \"js\") {\r\n      words = [\r\n        \"abstract\",\r\n        \"arguments\",\r\n        \"boolean\",\r\n        \"break\",\r\n        \"byte\",\r\n        \"case\",\r\n        \"catch\",\r\n        \"char\",\r\n        \"class\",\r\n        \"const\",\r\n        \"continue\",\r\n        \"debugger\",\r\n        \"default\",\r\n        \"delete\",\r\n        \"do\",\r\n        \"double\",\r\n        \"else\",\r\n        \"enum\",\r\n        \"eval\",\r\n        \"export\",\r\n        \"extends\",\r\n        \"false\",\r\n        \"final\",\r\n        \"finally\",\r\n        \"float\",\r\n        \"for\",\r\n        \"function\",\r\n        \"goto\",\r\n        \"if\",\r\n        \"implements\",\r\n        \"import\",\r\n        \"in\",\r\n        \"instanceof\",\r\n        \"int\",\r\n        \"interface\",\r\n        \"let\",\r\n        \"long\",\r\n        \"NaN\",\r\n        \"native\",\r\n        \"new\",\r\n        \"null\",\r\n        \"package\",\r\n        \"private\",\r\n        \"protected\",\r\n        \"public\",\r\n        \"return\",\r\n        \"short\",\r\n        \"static\",\r\n        \"super\",\r\n        \"switch\",\r\n        \"synchronized\",\r\n        \"this\",\r\n        \"throw\",\r\n        \"throws\",\r\n        \"transient\",\r\n        \"true\",\r\n        \"try\",\r\n        \"typeof\",\r\n        \"var\",\r\n        \"void\",\r\n        \"volatile\",\r\n        \"while\",\r\n        \"with\",\r\n        \"yield\",\r\n      ];\r\n    }\r\n    for (i = 0; i < words.length; i++) {\r\n      pos = txt.indexOf(words[i]);\r\n      if (pos > -1) {\r\n        patt = /\\W/g;\r\n        if (\r\n          txt.substr(pos + words[i].length, 1).match(patt) &&\r\n          txt.substr(pos - 1, 1).match(patt)\r\n        ) {\r\n          if (pos > -1 && (rpos == -1 || pos < rpos)) {\r\n            rpos = pos;\r\n            rpos2 = rpos + words[i].length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return [rpos, rpos2, func];\r\n  }\r\n  function getPos(txt, start, end, func) {\r\n    var s, e;\r\n    s = txt.search(start);\r\n    e = txt.indexOf(end, s + end.length);\r\n    if (e == -1) {\r\n      e = txt.length;\r\n    }\r\n    return [s, e + end.length, func];\r\n  }\r\n  function getNumPos(txt, func) {\r\n    var arr = [\r\n        \"<br>\",\r\n        \" \",\r\n        \";\",\r\n        \"(\",\r\n        \"+\",\r\n        \")\",\r\n        \"[\",\r\n        \"]\",\r\n        \",\",\r\n        \"&\",\r\n        \":\",\r\n        \"{\",\r\n        \"}\",\r\n        \"/\",\r\n        \"-\",\r\n        \"*\",\r\n        \"|\",\r\n        \"%\",\r\n        \"=\",\r\n      ],\r\n      i,\r\n      j,\r\n      c,\r\n      startpos = 0,\r\n      endpos,\r\n      word;\r\n    for (i = 0; i < txt.length; i++) {\r\n      for (j = 0; j < arr.length; j++) {\r\n        c = txt.substr(i, arr[j].length);\r\n        if (c == arr[j]) {\r\n          if (\r\n            c == \"-\" &&\r\n            (txt.substr(i - 1, 1) == \"e\" || txt.substr(i - 1, 1) == \"E\")\r\n          ) {\r\n            continue;\r\n          }\r\n          endpos = i;\r\n          if (startpos < endpos) {\r\n            word = txt.substring(startpos, endpos);\r\n            if (!isNaN(word)) {\r\n              return [startpos, endpos, func];\r\n            }\r\n          }\r\n          i += arr[j].length;\r\n          startpos = i;\r\n          i -= 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return [-1, -1, func];\r\n  }\r\n}\r\n\r\nfunction appCopy(v) {\r\n  var select = document.createRange();\r\n  select.selectNodeContents(v);\r\n  window.getSelection().removeAllRanges();\r\n  window.getSelection().addRange(select);\r\n  document.execCommand(\"copy\");\r\n  window.getSelection().removeRange(select);\r\n}\r\n\n\n//# sourceURL=webpack://boxy-webpack/./src/js/boxy-live.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/boxy-live.js"]();
/******/ 	
/******/ })()
;